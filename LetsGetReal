public class LetsGetReal {
    public class RealNumber{
        private double value;

        public RealNumber(double v){
            value = v;
        }

        public double getValue(){
            return value;
        }

        public String toString(){
            return "" + getValue();
        }

        public boolean equals(RealNumber other){
            double x = this.getValue();
            if ((x == 0) && (other.getValue() == 0)) {
                return true;
            } else {
                if (x >= other.getValue()) {
                    if (other.getValue() <= (x * 1.00001) && other.getValue() >= (x * 0.99999)) {
                        return true;
                    }
                }
            }
            return false;
        }

        public RealNumber add(RealNumber other){
            RealNumber add = this + other;
            return add;
        }

        /*
         *Return a new RealNumber that has the value of:
         *the product of this and the other
         */
        public RealNumber multiply(RealNumber other){
            RealNumber multiply = this * other;
            return multiply;
        }

        /*
         *Return a new RealNumber that has the value of:
         *this divided by the other
         */
        public RealNumber divide(RealNumber other){
            RealNumber divide = this / other;
            return divide;
        }

        /*
         *Return a new RealNumber that has the value of:
         *this minus the other
         */
        public RealNumber subtract(RealNumber other){
            RealNumber subtract = this - other;
            return subtract;
        }
    }

public class RationalNumber extends RealNumber {
        private int numerator, denominator;

        /**Initialize the RationalNumber with the provided values
         *  if the denominator is 0, make the fraction 0/1 instead
         *@param nume the numerator
         *@param deno the denominator
         */
        public RationalNumber(int nume, int deno){
            super(0.0);//this value is ignored!
            if (deno == 0) {
                int hold = nume;
                nume = deno;
                deno = hold;
            }
        }

        public double getValue(){
            double value;
            if (denominator == 0) {
                int hold = numerator;
                numerator = denominator;
                denominator = hold;
            }
            double nume = numerator;
            double deno = denominator;
            value = nume / deno;
            return value;
        }

        /**
         *@return the numerator
         */
        public int getNumerator(){
            return numerator;
        }
        /**
         *@return the denominator
         */
        public int getDenominator(){
            return denominator;
        }
        /**
         *@return a new RationalNumber that has the same numerator
         *and denominator as this RationalNumber but reversed.
         */
        public RationalNumber reciprocal(){
            if (numerator == 0) {
                return null;
            }
            RationalNumber reciprocal = new RationalNumber(denominator, numerator);
            return reciprocal;
        }
        /**
         *@return true when the RationalNumbers have the same numerators and denominators, false otherwise.
         */
        public boolean equals(RationalNumber other){
            if (numerator == other.getNumerator() && denominator == other.getDenominator()) {
                return true;
            }
            return false;
        }
        
        /**
         *@return the value expressed as "3/4" or "8/3"
         */
        public String toString(){
            return "" + numerator + "/" + denominator;
        }
        
        /**Calculate the GCD of two integers.
         *@param a the first integers
         *@param b the second integer
         *@return the value of the GCD
         */
        private static int gcd(int a, int b){
            /*use euclids method or a better one*/
            http://sites.math.rutgers.edu/~greenfie/gs2004/euclid.html
            if (a > b) {
                if (a % b == 0) {
                    return b;
                } else {
                    if (b % (a % b) == 0) {
                        return (a % b);
                    } else {
                        if ((a % b) % (b % (a % b)) == 0) {
                            return (b % (a % b));
                        }
                    }
                }
            } else {
                if (b % a == 0) {
                    return a;
                } else {
                    if (a % (b % a) == 0) {
                        return (b % a);
                    } else {
                        if ((b % a) % (a % (b % a)) == 0) {
                            return (a % (b % a));
                        }
                    }
                }
            }
            return 0;
        }
        
        /**
         *Divide the numerator and denominator by the GCD
         *This must be used to maintain that all RationalNumbers are
         *reduced after construction.
         */
        private void reduce(){
            int reduce = gcd(numerator, denominator);
            numerator = numerator / reduce;
            denominator = denominator / reduce;
        }
        
        
